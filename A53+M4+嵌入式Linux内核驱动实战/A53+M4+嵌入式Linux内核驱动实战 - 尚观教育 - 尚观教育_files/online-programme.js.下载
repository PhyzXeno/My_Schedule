define(function(require, exports, module) {
    var Notify = require('common/bootstrap-notify');
    exports.programDemo;
    exports.exerciseCode;
    exports.run = function() {
        
        //各种语言模板
        var exerciseTemplate = {};
        exerciseTemplate["bash"] = '#!/bin/bash\n#友情提示：请删除此段文字，在此输入Bash代码\necho "Hello Wyzc!"';
        exerciseTemplate["perl"] = '#!/usr/bin/perl\n#友情提示：请删除此段文字，在此输入Perl代码\nprint "Hello Wyzc!";';
        exerciseTemplate["java"] = 'public class Main {\n    public static void main(String[] args) {\n        /*友情提示：请删除此段文字，在此输入Java代码*/\n        System.out.println("Hello Wyzc!");\n   }\n}';
        exerciseTemplate["c"] = '#include <stdio.h>\nint main() {\n    /*友情提示：请删除此段文字，在此输入C代码*/\n    printf("Hello Wyzc!");\n    return 0;\n}';
        exerciseTemplate["cpp"] = '#include<iostream>\nusing namespace std;\nint main(){\n     /*友情提示：请删除此段文字，在此输入C++代码*/\n     cout <<"Hello Wyzc!";\n    return 0;\n}';
        exerciseTemplate["cs"] = 'using System;\nnamespace HelloWorldApplication{\n  class HelloWorld{\n     static void Main(string[] args){\n       /*友情提示：请删除此段文字，在此输入C#代码*/\n       Console.WriteLine("Hello Wyzc!");\n    }\n }\n}';
        exerciseTemplate["php"] = '<?php\n	/*友情提示：请删除此段文字，在此输入Php代码*/\n	echo "Hello Wyzc!";\n?>';
        exerciseTemplate["python"] = '#友情提示：请删除此段文字，在此输入Python代码\nprint("Hello Wyzc!")';
        exerciseTemplate["html"] = '<html>\n<head>\n</head>\n<body>\n<!--友情提示：请删除此段文字，在此输入HTML代码-->\nHello Wyzc!\n</body>\n</html>';

        //去除前后空格
        var trimString = function(string) {
            var reg = /^(\s+)|(\s+)$/ig;
            if (string != "") {
                string = string.replace(reg, '');
            }
            return string;
        }

        var initExerciseCode = function(){
            var language_name = $('.write-modal').attr('data-language');
            var language_ext_name = $('.write-modal').attr('data-languageextname');
            var mode = language_name;
            var val = exerciseTemplate[language_name];
            if(language_name == 'python') mode = 'py';
            var options = {
                lineNumbers: true,
                indentUnit: 4,
                matchBrackets: true,
                theme: 'blackboard',
                lineWrapping: true,
                showCursorWhenSelecting: true,
                autoCloseBrackets: true,
                mode: 'text/' + mode
            };
            exports.exerciseCode = CodeMirror.fromTextArea($('.write-modal')[0], options);
            if (typeof exports.exerciseCode === 'object') {
                exports.exerciseCode.setValue(val);
                setTimeout(function() {
                    exports.exerciseCode.refresh();
                }, 200);
            }
            
            //重置
            $(document).find('.rest-code').on('click',function(){
                if (typeof exports.exerciseCode === 'object') {
                    exports.exerciseCode.setValue('');
                }
            });
            
            //运行
            $(document).find('.run-programme').on('click',function(){
                var self = $(this);
                if(self.data('lock') == 1) return false;
                self.data('lock',1);
                var language_id = $('.write-modal').attr('data-lid');
                var sourceCode =  exports.exerciseCode.getValue();
                sourceCode = trimString(sourceCode);
                self.removeClass('run-code').addClass('runing-code');
                $('.run-journal').show();
                $('.journal-content').html('<p>正在连接服务器，请稍候......</p><p>-------------------------------------------------</p>');
                setTimeout(function() {
                    start();
                }, 200);
                    
                function start() {
                    if (sourceCode == "") {
                        var str = "<p>服务器已连接</p>";
                        str+= "<p>-------------------------------------------------</p>";
                        str+= "<p>源代码为空</p>";
                        str+= "<p>-------------------------------------------------</p>";
                        str+= "<p>程序运行结束</p>";
                        $('.journal-content').html(str);
                        self.data('lock',0);
                        self.removeClass('runing-code').addClass('run-code');
                    } else {
                        setTimeout(function() {
                            runing();
                        }, 200);
                    }
                }
                
                function runing() {
                    if (language_id == 200) language_id = 7;
                    $.post('/course/OnlineProgramme/runProgramAction', {language_id: language_id, sourceCode: sourceCode}, function(data) {
                        if (data.status) {
                            var solution_id = data.info;
                            setTimeout(function() {
                                getRunResult(solution_id);
                            }, 200);
                        } else {
                            var error_str = '<p>服务器已连接</p>';
                            error_str+= '<p>-------------------------------------------------</p>';
                            error_str+= '<p>编译失败,请稍候再试!</p>';
                            error_str+= '<p>-------------------------------------------------</p>';
                            error_str+= '<p>程序运行结束</p>';
                            $('.journal-content').html(error_str);
                            self.data('lock',0);
                            self.removeClass('runing-code').addClass('run-code');
                        }
                    }, 'json');
                }
                
                function getRunResult(solution_id){
                    $.ajax({
                        text: 'get',
                        url: '/course/OnlineProgramme/getRunResultAction',
                        data: {solution_id: solution_id, read: "read", language_name: language_ext_name},
                        timeout: 60000,
                        dataType: 'json',
                        cache: false,
                        error: function(XMLHttpRequest, textStatus, errorThrown) {
                            try {
                                if (typeof console != "undefined") {
                                    console.info("[state:" + textStatus + ",error:" + errorThrown + " ]");
                                }
                            } catch (e) {
                                console.info("catch error[" + e.name + "]" + e.message);
                            }
                            if (textStatus == "timeout") {
                                var timeout_str = '<p>服务器已连接</p>';
                                timeout_str+= '<p>-------------------------------------------------</p>';
                                timeout_str+= '<p>网络请求超时,请稍候再试!</p>';
                                timeout_str+= '<p>-------------------------------------------------</p>';
                                timeout_str+= '<p>程序运行结束</p>';
                                $('.journal-content').html(timeout_str);
                            }
                            self.data('lock',0);
                            self.removeClass('runing-code').addClass('run-code');
                        },
                        success: function(dataObj) {
                            var success_str = '<p>'+dataObj.info+'</p>';
                            $('.journal-content').html(success_str);
                            self.data('lock',0);
                            self.removeClass('runing-code').addClass('run-code');
                        }
                    });
                }   
                
            });
            
        }
        
        //点击在线编程
        $(document).find('.online-programme').on('click',function(){
            var self = $(this);
            var qid = self.attr('data-qid');
            $.post('/course/OnlineProgramme/getProgrammeModalAction', {qid:qid}, function(dataObj) {
                if(dataObj.status){
                    $('body').append(dataObj.info);
                    initExerciseCode();
                }else{
                    Notify.danger(dataObj.info);
                }
            }, 'json');
        });
        
        //关闭在线编程
        $(document).delegate('.close-programme-modal', 'click', function () {
            $('.win-modal').remove();
        });
        
        //点击程序案例
        $(document).delegate('.programme-demo', 'click', function () {
            var options = {
                lineNumbers: true,
                indentUnit: 4,
                matchBrackets: true,
                theme: 'blackboard',
                lineWrapping: true,
                showCursorWhenSelecting: true,
                autoCloseBrackets: true,
                "F11": function(cm) {
                    cm.setOption("fullScreen", !cm.getOption("fullScreen"));
                },
                extraKeys: {
                    "Esc": function(cm) {
                        if (cm.getOption("fullScreen"))
                            cm.setOption("fullScreen", false);
                    }
                }
            };
            if($(".procedural-content .CodeMirror").length<1){
                exports.programDemo = CodeMirror.fromTextArea($('.procedural-textarea')[0], options);
            }
            if (typeof exports.programDemo === 'object') {
                exports.programDemo.setValue($('.procedural-textarea').val());
                exports.programDemo.setOption('readOnly', true);
                setTimeout(function() {
                    exports.programDemo.refresh();
                }, 200);
            }
            $('.procedural-case').show();
        });
        
        //关闭程序案例
        $(document).delegate('.close-programme-demo', 'click', function () {
            $('.procedural-case').hide();
        });
        
        //关闭运行层
        $(document).delegate('.close-run-modal', 'click', function () {
            $('.run-journal').hide();
        });

    }

});